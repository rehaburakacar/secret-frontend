{
  "name": "vite-plugin-pages",
  "version": "0.22.0",
  "description": "File system base vue-router plugin for Vite",
  "keywords": [
    "vite",
    "vue",
    "vute-router",
    "react",
    "react-router",
    "file-system-based",
    "routing"
  ],
  "license": "MIT",
  "author": "hannoeru <me@hanlee.co>",
  "repository": {
    "type": "git",
    "url": "https://github.com/hannoeru/vite-plugin-pages"
  },
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "exports": {
    ".": {
      "require": "./dist/index.js",
      "import": "./dist/index.mjs",
      "types": "./dist/index.d.ts"
    },
    "./client": {
      "types": "./client.d.ts"
    },
    "./client-react": {
      "types": "./client-react.d.ts"
    },
    "./client-solid": {
      "types": "./client-solid.d.ts"
    }
  },
  "files": [
    "dist",
    "client.d.ts",
    "client-react.d.ts",
    "client-solid.d.ts",
    "LICENSE"
  ],
  "homepage": "https://github.com/hannoeru/vite-plugin-pages",
  "bugs": "https://github.com/hannoeru/vite-plugin-pages/issues",
  "peerDependencies": {
    "@vue/compiler-sfc": ">=3",
    "vite": ">=2"
  },
  "peerDependenciesMeta": {
    "@vue/compiler-sfc": {
      "optional": true
    }
  },
  "dependencies": {
    "debug": "^4.3.3",
    "deep-equal": "^2.0.5",
    "fast-glob": "^3.2.11",
    "json5": "^2.2.0",
    "local-pkg": "^0.4.1",
    "picocolors": "^1.0.0",
    "yaml": "^2.0.0-10"
  },
  "devDependencies": {
    "@antfu/utils": "^0.5.0",
    "@hannoeru/eslint-config": "^0.7.6",
    "@types/debug": "^4.1.7",
    "@types/deep-equal": "^1.0.1",
    "@types/glob-to-regexp": "^0.4.1",
    "@types/node": "^17.0.21",
    "@vitest/ui": "^0.6.1",
    "@vue/compiler-sfc": "^3.2.31",
    "bumpp": "^7.1.1",
    "cross-env": "^7.0.3",
    "eslint": "^8.11.0",
    "esno": "^0.14.1",
    "playwright": "^1.20.0",
    "react-router": "^6.2.2",
    "solid-app-router": "^0.3.1",
    "tsup": "^5.12.1",
    "typescript": "^4.6.2",
    "vite": "^2.8.6",
    "vitest": "^0.6.1",
    "vue-router": "^4.0.14"
  },
  "scripts": {
    "dev": "npm run build -- --watch --ignore-watch examples",
    "build": "tsup",
    "release": "bumpp --commit --tag --push",
    "publish:ci": "esno scripts/publish.ts",
    "example:dev": "npm -C examples/vue run dev",
    "example:build": "npm -C examples/vue run build",
    "example:serve": "npm -C examples/vue run serve",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "lint": "eslint .",
    "lint:fix": "eslint --fix ."
  },
  "readme": "# vite-plugin-pages\n\n[![npm version](https://badgen.net/npm/v/vite-plugin-pages)](https://www.npmjs.com/package/vite-plugin-pages)\n[![monthly downloads](https://badgen.net/npm/dm/vite-plugin-pages)](https://www.npmjs.com/package/vite-plugin-pages)\n[![types](https://badgen.net/npm/types/vite-plugin-pages)](https://github.com/hannoeru/vite-plugin-pages/blob/main/src/types.ts)\n[![license](https://badgen.net/npm/license/vite-plugin-pages)](https://github.com/hannoeru/vite-plugin-pages/blob/main/LICENSE)\n\n[![Open in Visual Studio Code](https://open.vscode.dev/badges/open-in-vscode.svg)](https://open.vscode.dev/hannoeru/vite-plugin-pages)\n\n> File system based routing for Vue 3 / React applications using\n> [Vite](https://github.com/vitejs/vite)\n\n## Getting Started\n\n### Vue\n\nInstall:\n\n```bash\nnpm install -D vite-plugin-pages\nnpm install vue-router\n```\n\n### React\n\n> since v0.19.0 we only support react-router v6, if you are using react-router v5 use v0.18.2.\n\nInstall:\n\n```bash\nnpm install -D vite-plugin-pages\nnpm install react-router react-router-dom \n```\n\n### Solid\n\nInstall:\n\n```bash\nnpm install -D vite-plugin-pages\nnpm install solid-app-router\n```\n\n### Vite config\n\nAdd to your `vite.config.js`:\n\n```js\nimport Pages from 'vite-plugin-pages'\n\nexport default {\n  plugins: [\n    // ...\n    Pages(),\n  ],\n}\n```\n\n## Overview\n\nBy default a page is a Vue component exported from a `.vue` or `.js` file in the\n`src/pages` directory.\n\nYou can access the generated routes by importing the `~pages`\nmodule in your application.\n\n### Vue\n\n```js\nimport { createRouter } from 'vue-router'\nimport routes from '~pages'\n\nconst router = createRouter({\n  // ...\n  routes,\n})\n```\n\n**Type**\n\n```ts\n// vite-env.d.ts\n/// <reference types=\"vite-plugin-pages/client\" />\n```\n\n### React\n\n**experimental**\n\n```js\nimport {\n  BrowserRouter as Router,\n  useRoutes,\n} from 'react-router-dom'\n\nimport routes from '~react-pages'\n\nfunction App() {\n  return useRoutes(routes)\n}\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n)\n```\n\n**Type**\n\n```ts\n// vite-env.d.ts\n/// <reference types=\"vite-plugin-pages/client-react\" />\n```\n\n### Solid\n\n**experimental**\n\n```tsx\nimport { render } from 'solid-js/web'\nimport { Router, useRoutes } from 'solid-app-router'\nimport routes from '~solid-pages'\n\nrender(\n  () => {\n    const Routes = useRoutes(routes)\n    return (\n      <Router>\n        <Routes />\n      </Router>\n    )\n  },\n  document.getElementById('root') as HTMLElement,\n)\n```\n\n**Type**\n\n```ts\n// vite-env.d.ts\n/// <reference types=\"vite-plugin-pages/client-solid\" />\n```\n\n## Configuration\n\nTo use custom configuration, pass your options to Pages when instantiating the\nplugin:\n\n```js\n// vite.config.js\nimport Pages from 'vite-plugin-pages'\n\nexport default {\n  plugins: [\n    Pages({\n      dirs: 'src/views',\n    }),\n  ],\n}\n```\n\n### dirs\n\n- **Type:** `string | (string | PageOptions)[]`\n- **Default:** `'src/pages'`\n\nPaths to the pages directory. Supports globs.\n\nCan be:\n\n- single path: routes point to `/`\n- array of paths: all routes in the paths point to `/`\n- array of `PageOptions`, Check below ðŸ‘‡\n\nSpecifying a glob or an array of `PageOptions` allow you to use multiple\npages folder, and specify the base route to append to the path and the route\nname.\n\n**Example:**\n\n```bash\n# folder structure\nsrc/\n  â”œâ”€â”€ features/\n  â”‚  â””â”€â”€ dashboard/\n  â”‚     â”œâ”€â”€ code/\n  â”‚     â”œâ”€â”€ components/\n  â”‚     â””â”€â”€ pages/\n  â”œâ”€â”€ admin/\n  â”‚   â”œâ”€â”€ code/\n  â”‚   â”œâ”€â”€ components/\n  â”‚   â””â”€â”€ pages/\n  â””â”€â”€ pages/\n```\n\n```js\n// vite.config.js\nexport default {\n  plugins: [\n    Pages({\n      dirs: [\n        { dir: 'src/pages', baseRoute: '' },\n        { dir: 'src/features/**/pages', baseRoute: 'features' },\n        { dir: 'src/admin/pages', baseRoute: 'admin' },\n      ],\n    }),\n  ],\n}\n```\n\n### extensions\n\n- **Type:** `string[]`\n- **Default:**\n  - Vue: `['vue', 'ts', 'js']`\n  - React: `['tsx', 'jsx']`\n  - Solid: `['tsx', 'jsx', 'ts', 'js']`\n\nAn array of valid file extensions for pages.\n\n### exclude\n\n- **Type:** `string[]`\n- **Default:** `[]`\n\nAn array of glob patterns to exclude matches.\n\n```bash\n# folder structure\nsrc/pages/\n  â”œâ”€â”€ users/\n  â”‚  â”œâ”€â”€ components\n  â”‚  â”‚  â””â”€â”€ form.vue\n  â”‚  â”œâ”€â”€ [id].vue\n  â”‚  â””â”€â”€ index.vue\n  â””â”€â”€ home.vue\n```\n\n```js\n// vite.config.js\nexport default {\n  plugins: [\n    Pages({\n      exclude: ['**/components/*.vue'],\n    }),\n  ],\n}\n```\n\n### importMode\n\n- **Type:** `'sync' | 'async' | (filepath: string, pluginOptions: ResolvedOptions) => 'sync' | 'async')`\n- **Default:**\n  - Top level index file: `'sync'`, others: `async`.\n\nImport mode can be set to either `async`, `sync`, or a function which returns\none of those values.\n\nTo get more fine-grained control over which routes are loaded sync/async, you\ncan use a function to resolve the value based on the route path. For example:\n\n```js\n// vite.config.js\nexport default {\n  plugins: [\n    Pages({\n      importMode(filepath, options) {\n        // default resolver\n        // for (const page of options.dirs) {\n        //   if (page.baseRoute === '' && filepath.startsWith(`/${page.dir}/index`))\n        //     return 'sync'\n        // }\n        // return 'async'\n\n        // Load about page synchronously, all other pages are async.\n        return filepath.includes('about') ? 'sync' : 'async'\n      },\n    }),\n  ],\n}\n```\n\nIf you are using `async` mode with `react-router`, you will need to wrap your route components with `Suspense`:\n\n```jsx\nconst App = () => {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      {useRoutes(routes)}\n    </Suspense>\n  )\n}\n```\n\n### routeBlockLang\n\n- **Type:** `string`\n- **Default:** `'json5'`\n\nDefault SFC route block parser.\n\n### routeStyle\n\n- **Type:** `'next' | 'nuxt' | 'remix'`\n- **Default:** `next`\n\nUse file system dynamic routing supporting: \n\n- [Nextjs Routing](https://nextjs.org/docs/routing/introduction)\n- [Nuxtjs Routing](https://nuxtjs.org/docs/2.x/features/file-system-routing)\n- [Remix Routing](https://remix.run/docs/en/v1/guides/routing)\n\n### resolver\n\n- **Type:** `string`\n- **Default:** `'auto detect'`\n\nRoute resolver, support `vue` or `react`.\n\n### extendRoute\n\n- **Type:**\n  `(route: any, parent: any | undefined) => any | void`\n\nA function that takes a route and optionally returns a modified route. This is\nuseful for augmenting your routes with extra data (e.g. route metadata).\n\n```js\n// vite.config.js\nexport default {\n  // ...\n  plugins: [\n    Pages({\n      extendRoute(route, parent) {\n        if (route.path === '/') {\n          // Index is unauthenticated.\n          return route\n        }\n\n        // Augment the route with meta that indicates that the route requires authentication.\n        return {\n          ...route,\n          meta: { auth: true },\n        }\n      },\n    }),\n  ],\n}\n```\n\n### onRoutesGenerated\n\n- **Type:** `(routes: any[]) => Awaitable<any[] | void>`\n\nA function that takes a generated routes and optionally returns a modified\ngenerated routes.\n\n### onClientGenerated\n\n- **Type:** `(clientCode: string) => Awaitable<string | void>`\n\nA function that takes a generated client code and optionally returns a modified\ngenerated client code.\n\n### SFC custom block for Route Data\n\nAdd route meta to the route by adding a `<route>` block to the SFC. This will be\ndirectly added to the route after it is generated, and will override it.\n\nYou can specific a parser to use using `<route lang=\"yaml\">`, or set a default\nparser using `routeBlockLang` option.\n\n- **Supported parser:** JSON, JSON5, YAML\n- **Default:** JSON5\n\nJSON/JSON5:\n\n```html\n<route>\n{\n  name: \"name-override\",\n  meta: {\n    requiresAuth: false\n  }\n}\n</route>\n```\n\nYAML:\n\n```html\n<route lang=\"yaml\">\nname: name-override\nmeta:\n  requiresAuth: true\n</route>\n```\n\n#### Syntax Highlighting `<route>`\n\nTo enable syntax highlighting `<route>` in VS Code using [Vetur's Custom Code Blocks](https://vuejs.github.io/vetur/highlighting.html#custom-block) add the following snippet to your preferences...\n\n 1. update setting\n \n ```\n \"vetur.grammar.customBlocks\": {\n    \"route\": \"json\"\n  }\n```\n \n 2. Run the command in vscode\n \n `Vetur: Generate grammar from vetur.grammar.customBlocks`\n \n 3. Restart VS Code to get syntax highlighting for custom blocks.\n\n\n## File System Routing\n\nInspired by the routing from\n[NuxtJS](https://nuxtjs.org/guides/features/file-system-routing) ðŸ’š\n\nPages automatically generates an array of routes for you to plug-in to your\ninstance of Vue Router. These routes are determined by the structure of the\nfiles in your pages directory. Simply create `.vue` files in your pages\ndirectory and routes will automatically be created for you, no additional\nconfiguration required!\n\nFor more advanced use cases, you can tailor Pages to fit the needs of your app\nthrough [configuration](#configuration).\n\n- [Basic Routing](#basic-routing)\n- [Index Routes](#index-routes)\n- [Dynamic Routes](#dynamic-routes)\n- [Nested Routes](#nested-routes)\n- [Catch-all Routes](#catch-all-routes)\n\n### Basic Routing\n\nPages will automatically map files from your pages directory to a route with the\nsame name:\n\n- `src/pages/users.vue` -> `/users`\n- `src/pages/users/profile.vue` -> `/users/profile`\n- `src/pages/settings.vue` -> `/settings`\n\n### Index Routes\n\nFiles with the name `index` are treated as the index page of a route:\n\n- `src/pages/index.vue` -> `/`\n- `src/pages/users/index.vue` -> `/users`\n\n### Dynamic Routes\n\nDynamic routes are denoted using square brackets. Both directories and pages can\nbe dynamic:\n\n- `src/pages/users/[id].vue` -> `/users/:id` (`/users/one`)\n- `src/pages/[user]/settings.vue` -> `/:user/settings` (`/one/settings`)\n\nAny dynamic parameters will be passed to the page as props. For example, given\nthe file `src/pages/users/[id].vue`, the route `/users/abc` will be passed the\nfollowing props:\n\n```json\n{ \"id\": \"abc\" }\n```\n\n### Nested Routes\n\nWe can make use of Vue Routers child routes to create nested layouts. The parent\ncomponent can be defined by giving it the same name as the directory that\ncontains your child routes.\n\nFor example, this directory structure:\n\n```\nsrc/pages/\n  â”œâ”€â”€ users/\n  â”‚  â”œâ”€â”€ [id].vue\n  â”‚  â””â”€â”€ index.vue\n  â””â”€â”€ users.vue\n```\n\nwill result in this routes configuration:\n\n```json5\n[\n  {\n    \"path\": \"/users\",\n    \"component\": \"/src/pages/users.vue\",\n    \"children\": [\n      {\n        \"path\": \"\",\n        \"component\": \"/src/pages/users/index.vue\",\n        \"name\": \"users\"\n      },\n      {\n        \"path\": \":id\",\n        \"component\": \"/src/pages/users/[id].vue\",\n        \"name\": \"users-id\"\n      }\n    ]\n  }\n]\n```\n\n### Catch-all Routes\n\nCatch-all routes are denoted with square brackets containing an ellipsis:\n\n- `src/pages/[...all].vue` -> `/*` (`/non-existent-page`)\n\nThe text after the ellipsis will be used both to name the route, and as the name\nof the prop in which the route parameters are passed.\n\n\n## Sitemap generation\n\nIf you need to generate a sitemap from generated routes, you can use [vite-plugin-pages-sitemap](https://github.com/jbaubree/vite-plugin-pages-sitemap).\nThis plugin allow you to automatically generate sitemap.xml and robots.xml files with customization.\n\n## License\n\nMIT License Â© 2021 [hannoeru](https://github.com/hannoeru)\n"
}