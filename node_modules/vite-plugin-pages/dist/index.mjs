var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => {
  return {
    set _(value) {
      __privateSet(obj, member, value, setter);
    },
    get _() {
      return __privateGet(obj, member, getter);
    }
  };
};

// src/constants.ts
var MODULE_IDS = [
  "~pages",
  "~react-pages",
  "~solid-pages",
  "pages-generated",
  "virtual:generated-pages",
  "virtual:generated-pages-react"
];
var MODULE_ID_VIRTUAL = "/@vite-plugin-pages/generated-pages";
var ROUTE_BLOCK_ID_VIRTUAL = "/@vite-plugin-pages/route-block";
var routeBlockQueryRE = /\?vue&type=route/;
var dynamicRouteRE = /^\[(.+)\]$/;
var cacheAllRouteRE = /^\[\.{3}(.*)\]$/;
var replaceDynamicRouteRE = /^\[(?:\.{3})?(.*)\]$/;
var nuxtDynamicRouteRE = /^_(.*)$/;
var nuxtCacheAllRouteRE = /^_$/;
var countSlashRE = /\//g;
var pathToNameRE = [
  /[_.\-\\/]/g,
  /[[:\]()]/g
];
var replaceIndexRE = /\/?index$/;

// src/context.ts
import { extname, join as join2, resolve as resolve3 } from "path";
import deepEqual from "deep-equal";

// node_modules/.pnpm/@antfu+utils@0.5.0/node_modules/@antfu/utils/dist/index.mjs
function toArray(array) {
  array = array || [];
  if (Array.isArray(array))
    return array;
  return [array];
}
function slash(str) {
  return str.replace(/\\/g, "/");
}
var Node = class {
  value;
  next;
  constructor(value) {
    this.value = value;
  }
};
var _head, _tail, _size;
var Queue = class {
  constructor() {
    __privateAdd(this, _head, void 0);
    __privateAdd(this, _tail, void 0);
    __privateAdd(this, _size, void 0);
    this.clear();
  }
  enqueue(value) {
    const node = new Node(value);
    if (__privateGet(this, _head)) {
      __privateGet(this, _tail).next = node;
      __privateSet(this, _tail, node);
    } else {
      __privateSet(this, _head, node);
      __privateSet(this, _tail, node);
    }
    __privateWrapper(this, _size)._++;
  }
  dequeue() {
    const current = __privateGet(this, _head);
    if (!current) {
      return;
    }
    __privateSet(this, _head, __privateGet(this, _head).next);
    __privateWrapper(this, _size)._--;
    return current.value;
  }
  clear() {
    __privateSet(this, _head, void 0);
    __privateSet(this, _tail, void 0);
    __privateSet(this, _size, 0);
  }
  get size() {
    return __privateGet(this, _size);
  }
  *[Symbol.iterator]() {
    let current = __privateGet(this, _head);
    while (current) {
      yield current.value;
      current = current.next;
    }
  }
};
_head = new WeakMap();
_tail = new WeakMap();
_size = new WeakMap();
var VOID = Symbol("p-void");

// src/context.ts
import colors from "picocolors";

// src/options.ts
import { resolve as resolve2 } from "path";

// src/files.ts
import { join } from "path";
import fg from "fast-glob";

// src/utils.ts
import { resolve, win32 } from "path";
import Debug from "debug";
var debug = {
  hmr: Debug("vite-plugin-pages:hmr"),
  routeBlock: Debug("vite-plugin-pages:routeBlock"),
  options: Debug("vite-plugin-pages:options"),
  pages: Debug("vite-plugin-pages:pages"),
  search: Debug("vite-plugin-pages:search"),
  env: Debug("vite-plugin-pages:env"),
  cache: Debug("vite-plugin-pages:cache"),
  resolver: Debug("vite-plugin-pages:resolver")
};
function extsToGlob(extensions) {
  return extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0] || "";
}
function countSlash(value) {
  return (value.match(countSlashRE) || []).length;
}
function isPagesDir(path, options) {
  for (const page of options.dirs) {
    const dirPath = slash(resolve(options.root, page.dir));
    if (path.startsWith(dirPath))
      return true;
  }
  return false;
}
function isTarget(path, options) {
  return isPagesDir(path, options) && options.extensionsRE.test(path);
}
function isDynamicRoute(routePath, nuxtStyle = false) {
  return nuxtStyle ? nuxtDynamicRouteRE.test(routePath) : dynamicRouteRE.test(routePath);
}
function isCatchAllRoute(routePath, nuxtStyle = false) {
  return nuxtStyle ? nuxtCacheAllRouteRE.test(routePath) : cacheAllRouteRE.test(routePath);
}
function resolveImportMode(filepath, options) {
  const mode = options.importMode;
  if (typeof mode === "function")
    return mode(filepath, options);
  return mode;
}
function pathToName(filepath) {
  return filepath.replace(pathToNameRE[0], "_").replace(pathToNameRE[1], "$");
}
function invalidatePagesModule(server) {
  const { moduleGraph } = server;
  const module = moduleGraph.getModuleById(MODULE_ID_VIRTUAL);
  if (module) {
    moduleGraph.invalidateModule(module);
    return module;
  }
}
function normalizeCase(str, caseSensitive) {
  if (!caseSensitive)
    return str.toLocaleLowerCase();
  return str;
}
function normalizeName(name, isDynamic, nuxtStyle = false) {
  if (!isDynamic)
    return name;
  return nuxtStyle ? name.replace(nuxtDynamicRouteRE, "$1") || "all" : name.replace(replaceDynamicRouteRE, "$1");
}
function buildReactRoutePath(node, nuxtStyle = false) {
  const isDynamic = isDynamicRoute(node, nuxtStyle);
  const isCatchAll = isCatchAllRoute(node, nuxtStyle);
  const normalizedName = normalizeName(node, isDynamic, nuxtStyle);
  if (isDynamic) {
    if (isCatchAll)
      return "*";
    return `:${normalizedName}`;
  }
  return `${normalizedName}`;
}
function buildReactRemixRoutePath(node) {
  const escapeStart = "[";
  const escapeEnd = "]";
  let result = "";
  let rawSegmentBuffer = "";
  let inEscapeSequence = 0;
  let skipSegment = false;
  for (let i = 0; i < node.length; i++) {
    let isNewEscapeSequence = function() {
      return !inEscapeSequence && char === escapeStart && lastChar !== escapeStart;
    }, isCloseEscapeSequence = function() {
      return inEscapeSequence && char === escapeEnd && nextChar !== escapeEnd;
    }, isStartOfLayoutSegment = function() {
      return char === "_" && nextChar === "_" && !rawSegmentBuffer;
    };
    const char = node.charAt(i);
    const lastChar = i > 0 ? node.charAt(i - 1) : void 0;
    const nextChar = i < node.length - 1 ? node.charAt(i + 1) : void 0;
    if (skipSegment) {
      if (char === "/" || char === "." || char === win32.sep)
        skipSegment = false;
      continue;
    }
    if (isNewEscapeSequence()) {
      inEscapeSequence++;
      continue;
    }
    if (isCloseEscapeSequence()) {
      inEscapeSequence--;
      continue;
    }
    if (inEscapeSequence) {
      result += char;
      continue;
    }
    if (char === "/" || char === win32.sep || char === ".") {
      if (rawSegmentBuffer === "index" && result.endsWith("index"))
        result = result.replace(replaceIndexRE, "");
      else
        result += "/";
      rawSegmentBuffer = "";
      continue;
    }
    if (isStartOfLayoutSegment()) {
      skipSegment = true;
      continue;
    }
    rawSegmentBuffer += char;
    if (char === "$") {
      result += typeof nextChar === "undefined" ? "*" : ":";
      continue;
    }
    result += char;
  }
  if (rawSegmentBuffer === "index" && result.endsWith("index"))
    result = result.replace(replaceIndexRE, "");
  return result || void 0;
}

// src/files.ts
function getIgnore(exclude) {
  return ["node_modules", ".git", "**/__*__/**", ...exclude];
}
function getPageDirs(PageOptions, root, exclude) {
  const dirs = fg.sync(slash(PageOptions.dir), {
    ignore: getIgnore(exclude),
    onlyDirectories: true,
    dot: true,
    unique: true,
    cwd: root
  });
  const pageDirs = dirs.map((dir) => __spreadProps(__spreadValues({}, PageOptions), {
    dir
  }));
  return pageDirs;
}
function getPageFiles(path, options) {
  const {
    exclude,
    extensions
  } = options;
  const ext = extsToGlob(extensions);
  const files = fg.sync(slash(join(path, `**/*.${ext}`)), {
    ignore: getIgnore(exclude),
    onlyFiles: true
  });
  return files;
}

// src/options.ts
function resolvePageDirs(dirs, root, exclude) {
  dirs = toArray(dirs);
  return dirs.flatMap((dir) => {
    const option = typeof dir === "string" ? { dir, baseRoute: "" } : dir;
    option.dir = slash(resolve2(root, option.dir)).replace(`${root}/`, "");
    option.baseRoute = option.baseRoute.replace(/^\//, "").replace(/\/$/, "");
    return getPageDirs(option, root, exclude);
  });
}
var syncIndexResolver = (filepath, options) => {
  for (const page of options.dirs) {
    if (page.baseRoute === "" && filepath.startsWith(`/${page.dir}/index`))
      return "sync";
  }
  return "async";
};
var getExtensions = (resolver) => {
  switch (resolver) {
    case "vue":
      return ["vue", "ts", "js"];
    case "react":
    case "solid":
      return ["tsx", "jsx", "ts", "js"];
    default:
      throw new Error(`Unsupported resolver: ${resolver}`);
  }
};
function resolveOptions(userOptions, viteRoot) {
  const {
    dirs = userOptions.pagesDir || ["src/pages"],
    routeBlockLang = "json5",
    exclude = [],
    caseSensitive = false,
    resolver = "vue",
    syncIndex = true,
    extendRoute,
    onRoutesGenerated,
    onClientGenerated
  } = userOptions;
  const root = viteRoot || slash(process.cwd());
  const importMode = userOptions.importMode || (syncIndex ? syncIndexResolver : "async");
  const extensions = userOptions.extensions || getExtensions(resolver);
  const extensionsRE = new RegExp(`\\.(${extensions.join("|")})$`);
  const resolvedDirs = resolvePageDirs(dirs, root, exclude);
  const routeStyle = userOptions.nuxtStyle ? "nuxt" : userOptions.routeStyle || "next";
  const resolvedOptions = {
    dirs: resolvedDirs,
    routeStyle,
    routeBlockLang,
    root,
    extensions,
    importMode,
    exclude,
    caseSensitive,
    resolver,
    extensionsRE,
    extendRoute,
    onRoutesGenerated,
    onClientGenerated
  };
  return resolvedOptions;
}

// src/stringify.ts
var componentRE = /"(?:component|element)":("(.*?)")/g;
var hasFunctionRE = /"(?:props|beforeEnter)":("(.*?)")/g;
var multilineCommentsRE = /\/\*(.|[\r\n])*?\*\//gm;
var singlelineCommentsRE = /\/\/.*/g;
function replaceFunction(_, value) {
  if (value instanceof Function || typeof value === "function") {
    const fnBody = value.toString().replace(multilineCommentsRE, "").replace(singlelineCommentsRE, "").replace(/(\t|\n|\r|\s)/g, "");
    if (fnBody.length < 8 || fnBody.substring(0, 8) !== "function")
      return `_NuFrRa_${fnBody}`;
    return fnBody;
  }
  return value;
}
function stringifyRoutes(preparedRoutes, options) {
  const imports = [];
  function componentReplacer(str, replaceStr, path) {
    const mode = resolveImportMode(path, options);
    if (mode === "sync") {
      const importName = pathToName(path);
      const importStr = `import ${importName} from "${path}"`;
      if (!imports.includes(importStr))
        imports.push(importStr);
      if (options.resolver === "react")
        return str.replace(replaceStr, `React.createElement(${importName})`);
      else
        return str.replace(replaceStr, importName);
    } else {
      if (options.resolver === "react")
        return str.replace(replaceStr, `React.createElement(React.lazy(() => import('${path}')))`);
      else if (options.resolver === "solid")
        return str.replace(replaceStr, `Solid.lazy(() => import('${path}'))`);
      else
        return str.replace(replaceStr, `() => import('${path}')`);
    }
  }
  function functionReplacer(str, replaceStr, content) {
    if (content.startsWith("function"))
      return str.replace(replaceStr, content);
    if (content.startsWith("_NuFrRa_"))
      return str.replace(replaceStr, content.slice(8));
    return str;
  }
  const stringRoutes = JSON.stringify(preparedRoutes, replaceFunction).replace(componentRE, componentReplacer).replace(hasFunctionRE, functionReplacer);
  return {
    imports,
    stringRoutes
  };
}
function generateClientCode(routes, options) {
  const { imports, stringRoutes } = stringifyRoutes(routes, options);
  if (options.resolver === "react")
    imports.push('import React from "react"');
  if (options.resolver === "solid")
    imports.push('import * as Solid from "solid-js"');
  return `${imports.join(";\n")};

const routes = ${stringRoutes};

export default routes;`;
}

// src/resolvers/react.ts
function prepareRoutes(routes, options, parent) {
  var _a, _b;
  for (const route of routes) {
    if (parent)
      route.path = (_a = route.path) == null ? void 0 : _a.replace(/^\//, "");
    if (route.children)
      route.children = prepareRoutes(route.children, options, route);
    delete route.rawRoute;
    if (route.index)
      delete route.path;
    Object.assign(route, ((_b = options.extendRoute) == null ? void 0 : _b.call(options, route, parent)) || {});
  }
  return routes;
}
async function resolveReactRoutes(ctx) {
  var _a, _b, _c, _d;
  const { routeStyle, caseSensitive } = ctx.options;
  const nuxtStyle = routeStyle === "nuxt";
  const pageRoutes = [...ctx.pageRouteMap.values()].sort((a, b) => countSlash(a.route) - countSlash(b.route));
  const routes = [];
  pageRoutes.forEach((page) => {
    const pathNodes = page.route.split("/");
    const element = page.path.replace(ctx.root, "");
    let parentRoutes = routes;
    for (let i = 0; i < pathNodes.length; i++) {
      const node = pathNodes[i];
      const route = {
        caseSensitive,
        path: "",
        rawRoute: pathNodes.slice(0, i + 1).join("/")
      };
      if (i === pathNodes.length - 1)
        route.element = element;
      const isIndexRoute = normalizeCase(node, caseSensitive).endsWith("index");
      if (!route.path && isIndexRoute) {
        route.index = true;
      } else if (!isIndexRoute) {
        if (routeStyle === "remix")
          route.path = buildReactRemixRoutePath(node);
        else
          route.path = buildReactRoutePath(node, nuxtStyle);
      }
      const parent = parentRoutes.find((parent2) => {
        return pathNodes.slice(0, i).join("/") === parent2.rawRoute;
      });
      if (parent) {
        parent.children = parent.children || [];
        parentRoutes = parent.children;
      }
      const exits = parentRoutes.some((parent2) => {
        return pathNodes.slice(0, i + 1).join("/") === parent2.rawRoute;
      });
      if (!exits)
        parentRoutes.push(route);
    }
  });
  let finalRoutes = prepareRoutes(routes, ctx.options);
  finalRoutes = await ((_b = (_a = ctx.options).onRoutesGenerated) == null ? void 0 : _b.call(_a, finalRoutes)) || finalRoutes;
  let client = generateClientCode(finalRoutes, ctx.options);
  client = await ((_d = (_c = ctx.options).onClientGenerated) == null ? void 0 : _d.call(_c, client)) || client;
  return client;
}

// src/resolvers/vue.ts
function prepareRoutes2(ctx, routes, parent) {
  var _a, _b, _c, _d;
  for (const route of routes) {
    if (route.name)
      route.name = route.name.replace(/-index$/, "");
    if (parent)
      route.path = (_a = route.path) == null ? void 0 : _a.replace(/^\//, "");
    if (route.children)
      route.children = prepareRoutes2(ctx, route.children, route);
    if ((_b = route.children) == null ? void 0 : _b.find((c) => c.name === route.name))
      delete route.name;
    route.props = true;
    delete route.rawRoute;
    if (route.customBlock) {
      Object.assign(route, route.customBlock || {});
      delete route.customBlock;
    }
    Object.assign(route, ((_d = (_c = ctx.options).extendRoute) == null ? void 0 : _d.call(_c, route, parent)) || {});
  }
  return routes;
}
async function resolveVueRoutes(ctx) {
  var _a, _b, _c, _d;
  const { routeStyle, caseSensitive } = ctx.options;
  const pageRoutes = [...ctx.pageRouteMap.values()].sort((a, b) => countSlash(a.route) - countSlash(b.route));
  const routes = [];
  pageRoutes.forEach((page) => {
    const pathNodes = page.route.split("/");
    const component = page.path.replace(ctx.root, "");
    const customBlock = ctx.customBlockMap.get(page.path);
    const route = {
      name: "",
      path: "",
      component,
      customBlock,
      rawRoute: page.route
    };
    let parentRoutes = routes;
    for (let i = 0; i < pathNodes.length; i++) {
      const node = pathNodes[i];
      const nuxtStyle = routeStyle === "nuxt";
      const isDynamic = isDynamicRoute(node, nuxtStyle);
      const isCatchAll = isCatchAllRoute(node, nuxtStyle);
      const normalizedName = normalizeName(node, isDynamic, nuxtStyle);
      const normalizedPath = normalizeCase(normalizedName, caseSensitive);
      route.name += route.name ? `-${normalizedName}` : normalizedName;
      const parent = parentRoutes.find((parent2) => {
        return pathNodes.slice(0, i + 1).join("/") === parent2.rawRoute;
      });
      if (parent) {
        parent.children = parent.children || [];
        parentRoutes = parent.children;
        route.path = "";
      } else if (normalizedPath === "index") {
        if (!route.path)
          route.path = "/";
      } else if (normalizedPath !== "index") {
        if (isDynamic) {
          route.path += `/:${normalizedName}`;
          if (isCatchAll) {
            if (i === 0)
              route.path += "(.*)*";
            else
              route.path += "(.*)";
          }
        } else {
          route.path += `/${normalizedPath}`;
        }
      }
    }
    parentRoutes.push(route);
  });
  let finalRoutes = prepareRoutes2(ctx, routes);
  finalRoutes = await ((_b = (_a = ctx.options).onRoutesGenerated) == null ? void 0 : _b.call(_a, finalRoutes)) || finalRoutes;
  let client = generateClientCode(finalRoutes, ctx.options);
  client = await ((_d = (_c = ctx.options).onClientGenerated) == null ? void 0 : _d.call(_c, client)) || client;
  return client;
}

// src/resolvers/solid.ts
function prepareRoutes3(options, routes, parent) {
  var _a, _b;
  for (const route of routes) {
    if (parent)
      route.path = (_a = route.path) == null ? void 0 : _a.replace(/^\//, "");
    if (route.children)
      route.children = prepareRoutes3(options, route.children, route);
    delete route.rawRoute;
    Object.assign(route, ((_b = options.extendRoute) == null ? void 0 : _b.call(options, route, parent)) || {});
  }
  return routes;
}
async function resolveSolidRoutes(ctx) {
  var _a, _b, _c, _d;
  const { routeStyle, caseSensitive } = ctx.options;
  const nuxtStyle = routeStyle === "nuxt";
  const pageRoutes = [...ctx.pageRouteMap.values()].sort((a, b) => countSlash(a.route) - countSlash(b.route));
  const routes = [];
  pageRoutes.forEach((page) => {
    const pathNodes = page.route.split("/");
    const component = page.path.replace(ctx.root, "");
    const element = page.path.replace(ctx.root, "");
    let parentRoutes = routes;
    for (let i = 0; i < pathNodes.length; i++) {
      const node = pathNodes[i];
      const normalizedPath = normalizeCase(node, caseSensitive);
      const route = {
        path: "",
        rawRoute: pathNodes.slice(0, i + 1).join("/")
      };
      const parent = parentRoutes.find((parent2) => pathNodes.slice(0, i).join("/") === parent2.rawRoute);
      if (parent) {
        parent.children = parent.children || [];
        parentRoutes = parent.children;
      }
      if (i === pathNodes.length - 1) {
        route.element = element;
        route.component = component;
      }
      if (normalizedPath === "index") {
        if (!route.path)
          route.path = "/";
      } else if (normalizedPath !== "index") {
        if (routeStyle === "remix")
          route.path = buildReactRemixRoutePath(node) || "";
        else
          route.path = buildReactRoutePath(node, nuxtStyle) || "";
      }
      const exist = parentRoutes.some((parent2) => {
        return pathNodes.slice(0, i + 1).join("/") === parent2.rawRoute;
      });
      if (!exist)
        parentRoutes.push(route);
    }
  });
  let finalRoutes = prepareRoutes3(ctx.options, routes);
  finalRoutes = await ((_b = (_a = ctx.options).onRoutesGenerated) == null ? void 0 : _b.call(_a, finalRoutes)) || finalRoutes;
  let client = generateClientCode(finalRoutes, ctx.options);
  client = await ((_d = (_c = ctx.options).onClientGenerated) == null ? void 0 : _d.call(_c, client)) || client;
  return client;
}

// src/customBlock.ts
import fs from "fs";
import JSON5 from "json5";
import { parse as YAMLParser } from "yaml";
import { importModule } from "local-pkg";
async function parseSFC(code) {
  try {
    const { parse } = await importModule("@vue/compiler-sfc");
    return parse(code, {
      pad: "space"
    }).descriptor;
  } catch {
    throw new Error(`[vite-plugin-pages] Vue3's "@vue/compiler-sfc" is required.`);
  }
}
function parseCustomBlock(block, filePath, options) {
  var _a;
  const lang = (_a = block.lang) != null ? _a : options.routeBlockLang;
  debug.routeBlock(`use ${lang} parser`);
  if (lang === "json5") {
    try {
      return JSON5.parse(block.content);
    } catch (err) {
      throw new Error(`Invalid JSON5 format of <${block.type}> content in ${filePath}
${err.message}`);
    }
  } else if (lang === "json") {
    try {
      return JSON.parse(block.content);
    } catch (err) {
      throw new Error(`Invalid JSON format of <${block.type}> content in ${filePath}
${err.message}`);
    }
  } else if (lang === "yaml" || lang === "yml") {
    try {
      return YAMLParser(block.content);
    } catch (err) {
      throw new Error(`Invalid YAML format of <${block.type}> content in ${filePath}
${err.message}`);
    }
  }
}
async function getRouteBlock(path, options) {
  const content = fs.readFileSync(path, "utf8");
  const parsed = await parseSFC(content);
  const blockStr = parsed.customBlocks.find((b) => b.type === "route");
  if (!blockStr)
    return;
  const result = parseCustomBlock(blockStr, path, options);
  return result;
}

// src/context.ts
var PageContext = class {
  constructor(userOptions, viteRoot = process.cwd()) {
    this._pageRouteMap = /* @__PURE__ */ new Map();
    this._customBlockMap = /* @__PURE__ */ new Map();
    this.rawOptions = userOptions;
    this.root = slash(viteRoot);
    debug.env("root", this.root);
    this.options = resolveOptions(userOptions, this.root);
    debug.options(this.options);
  }
  setLogger(logger) {
    this.logger = logger;
  }
  setupViteServer(server) {
    if (this._server === server)
      return;
    this._server = server;
    this.setupWatcher(server.watcher);
  }
  setupWatcher(watcher) {
    watcher.on("unlink", (path) => {
      path = slash(path);
      if (!isTarget(path, this.options))
        return;
      this.removePage(path);
      this.onUpdate();
    });
    watcher.on("add", async (path) => {
      path = slash(path);
      if (!isTarget(path, this.options))
        return;
      const page = this.options.dirs.find((i) => path.startsWith(slash(resolve3(this.root, i.dir))));
      await this.addPage(path, page);
      this.onUpdate();
    });
    watcher.on("change", async (path) => {
      path = slash(path);
      if (!isTarget(path, this.options))
        return;
      const page = this._pageRouteMap.get(path);
      if (page)
        this.checkCustomBlockChange(path);
    });
  }
  async addPage(path, pageDir) {
    debug.pages("add", path);
    for (const p of toArray(path)) {
      const pageDirPath = slash(resolve3(this.root, pageDir.dir));
      const route = slash(join2(pageDir.baseRoute, p.replace(`${pageDirPath}/`, "").replace(extname(p), "")));
      this._pageRouteMap.set(p, {
        path: p,
        route
      });
      await this.checkCustomBlockChange(p);
    }
  }
  removePage(path) {
    debug.pages("remove", path);
    toArray(path).forEach((p) => {
      this._pageRouteMap.delete(p);
      this._customBlockMap.delete(p);
    });
  }
  async checkCustomBlockChange(path) {
    var _a;
    if (this.options.resolver !== "vue")
      return;
    const exitsCustomBlock = this._customBlockMap.get(path);
    let customBlock;
    try {
      customBlock = await getRouteBlock(path, this.options);
    } catch (error) {
      (_a = this.logger) == null ? void 0 : _a.error(colors.red(`[vite-plugin-pages] ${error.message}`));
      return;
    }
    if (!exitsCustomBlock && !customBlock)
      return;
    if (!customBlock) {
      this._customBlockMap.delete(path);
      debug.routeBlock("%s deleted", path);
      return;
    }
    if (!exitsCustomBlock || !deepEqual(exitsCustomBlock, customBlock)) {
      debug.routeBlock("%s old: %O", path, exitsCustomBlock);
      debug.routeBlock("%s new: %O", path, customBlock);
      this._customBlockMap.set(path, customBlock);
      this.onUpdate();
    }
  }
  onUpdate() {
    if (!this._server)
      return;
    invalidatePagesModule(this._server);
    debug.hmr("Reload generated pages.");
    this._server.ws.send({
      type: "full-reload"
    });
  }
  async resolveRoutes() {
    if (this.options.resolver === "vue")
      return await resolveVueRoutes(this);
    if (this.options.resolver === "react")
      return await resolveReactRoutes(this);
    if (this.options.resolver === "solid")
      return await resolveSolidRoutes(this);
  }
  async searchGlob() {
    const pageDirFiles = this.options.dirs.map((page) => {
      const pagesDirPath = slash(resolve3(this.options.root, page.dir));
      const files = getPageFiles(pagesDirPath, this.options);
      debug.search(page.dir, files);
      return __spreadProps(__spreadValues({}, page), {
        files: files.map((file) => slash(file))
      });
    });
    for (const page of pageDirFiles)
      await this.addPage(page.files, page);
    debug.cache(this.pageRouteMap);
    debug.cache(this.customBlockMap);
  }
  get debug() {
    return debug;
  }
  get pageRouteMap() {
    return this._pageRouteMap;
  }
  get customBlockMap() {
    return this._customBlockMap;
  }
};

// src/index.ts
function pagesPlugin(userOptions = {}) {
  let ctx;
  return {
    name: "vite-plugin-pages",
    enforce: "pre",
    async configResolved(config) {
      if (!userOptions.resolver && config.plugins.find((i) => i.name.includes("vite:react")))
        userOptions.resolver = "react";
      if (!userOptions.resolver && config.plugins.find((i) => i.name.includes("solid")))
        userOptions.resolver = "solid";
      ctx = new PageContext(userOptions, config.root);
      ctx.setLogger(config.logger);
      await ctx.searchGlob();
    },
    configureServer(server) {
      ctx.setupViteServer(server);
    },
    resolveId(id) {
      if (MODULE_IDS.includes(id))
        return MODULE_ID_VIRTUAL;
      if (routeBlockQueryRE.test(id))
        return ROUTE_BLOCK_ID_VIRTUAL;
      return null;
    },
    async load(id) {
      if (id === MODULE_ID_VIRTUAL)
        return ctx.resolveRoutes();
      if (id === ROUTE_BLOCK_ID_VIRTUAL) {
        return {
          code: "export default {};",
          map: null
        };
      }
      return null;
    }
  };
}
var src_default = pagesPlugin;
export {
  PageContext,
  src_default as default,
  syncIndexResolver
};
//# sourceMappingURL=index.mjs.map